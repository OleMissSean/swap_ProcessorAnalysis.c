Sean Staz
CSci 233
Homework #3
10/16/2013

C Code: This generates incorrect assembly code because it uses "pass by
        value", but not "pass by pointer".
                    
void swap1(int i, int j)
{
	int t = i;
	i = j;
	j = t;
}

Assembly Code:

	.globl	swap1                         |
	.type	swap1, @function              |    
swap1:                                    |
.LFB22:                                   |
	.cfi_startproc                        |
	rep                                   |------------ Improper assembly code is generated 
	ret                                   |             because even though "pass by value" was
	.cfi_endproc                          |             used, it should have been pass by pointer.
.LFE22:                                   |
	.size	swap1, .-swap1                |
_______________________________________________________________

C Code: You can see here that swap2 is drastically different than swap1.
        swap2 uses "pass by pointer" which generates the desired/correct
        code.

void swap2(int *i, int *j)
{
	int t = *i;
	*i = *j;
	*j = t;
}

Assembly Code:

swap2:                                  //Correct code
.LFB23:
	.cfi_startproc
	movl	(%rdi), %eax
	movl	(%rsi), %edx
	movl	%edx, (%rdi)
	movl	%eax, (%rsi)
	ret
	.cfi_endproc
.LFE23:
	.size	swap2, .-swap2
_________________________________________________________________

C Code:

int main()
{
int i = 5, j = 2;

printf("Pre-1: i, %d, j: %d\n", i, j);
swap1(i, j);
printf("Post-1: i: %d, j: %d\n", i, j);

printf("Pre-2: i, %d, j: %d\n", i, j);
swap2(&i, &j);
printf("Post-2: i: %d, j: %d\n", i, j);

return 0;
}

Assembly Code:

main:
.LFB24:
	.cfi_startproc
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$5, 8(%rsp)
	movl	$2, 12(%rsp)
	movl	$2, %ecx
	movl	$5, %edx
	movl	$.LC0, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	12(%rsp), %ecx
	movl	8(%rsp), %edx
	movl	$.LC1, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	12(%rsp), %ecx
	movl	8(%rsp), %edx
	movl	$.LC2, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	12(%rsp), %rsi
	leaq	8(%rsp), %rdi
	call	swap2
	movl	12(%rsp), %ecx
	movl	8(%rsp), %edx
	movl	$.LC3, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	$0, %eax
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE24:
	.size	main, .-main
	.ident	"GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3"
	.section	.note.GNU-stack,"",@progbits
